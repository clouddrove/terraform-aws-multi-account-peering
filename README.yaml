---
#
# This is the canonical configuration for the `README.md`
# Run `make readme` to rebuild the `README.md`
#

# Name of this project
name : Terraform AWS Multi Account Peering

# License of this project
license: "APACHE"

# Canonical GitHub repo
github_repo: clouddrove/terraform-aws-multi-account-peering

# Badges to display
badges:
  - name: "Terraform"
    image: "https://img.shields.io/badge/Terraform-v1.1.7-green"
    url: "https://www.terraform.io"
  - name: "Licence"
    image: "https://img.shields.io/badge/License-APACHE-blue.svg"
    url: "LICENSE.md"
  - name: "tfsec"
    image: "https://github.com/clouddrove/terraform-aws-multi-account-peering/actions/workflows/tfsec.yml/badge.svg"
    url: "https://github.com/clouddrove/terraform-aws-multi-account-peering/actions/workflows/tfsec.yml"
  - name: "static-checks"
    image: "https://github.com/clouddrove/terraform-aws-multi-account-peering/actions/workflows/terraform.yml/badge.svg"
    url: "https://github.com/clouddrove/terraform-aws-multi-account-peering/actions/workflows/terraform.yml"

#  description of this project
description: |-
  Terraform module to connect two VPCâ€™s from different AWS account.

# extra content
include:
  - "terraform.md"

# How to use this project
usage : |-
  ### Simple Example
  Here are an example of how you can use this module in your inventory structure:
  ```hcl
    module "vpc-peering" {
          source            = "clouddrove/multi-account-peering/aws"
          version           = "1.0.1"
          name              = "vpc-peering"
          environment       = "test"
          label_order       = ["environment", "name"]
          enable_peering    = true
          accepter_role_arn = "arn:aws:iam::XXXXXXXXXXXX:role/assume-role"
          accepter_region   = "eu-west-1"
          requestor_vpc_id  = "vpc-XXXXXXXXXXXXXX"
          acceptor_vpc_id   = "vpc-XXXXXXXXXXXXXX"
         }
  ```